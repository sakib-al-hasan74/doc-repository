//------------- Git Documents ----------//
//
//
//   ।
//
--> যদি আমরা একটা ফাইল এর ভিতর হিডেন ফাইল হতে শুরু করে যা কিছু আছে। এই সবকিছু দেখতে চাই তাহলে আমাদের একটি কমান্ড ব্যবহার করতে হবে ls -a

-- আর যদি হিডেন ফাইল ছাড়া দেখতে চাই তাহলে ls এই কমান্ড লিখতে হবে।

//
//
//===============- Note -==============
#
#
#
#
* Step_1 - Working Dir to Staging Area
*
* Step_2 - Staging Area to Local Repository
*
* Step_3 - Finally Local Repository to Remote or Github

#
#
#
* কোন প্রজেক্টকে যদি আমরা Working Dir থেকে Staging Area তুলতে চাই তাহলে আমাদের একটি কমান্ড লিখতে হয় তা হলো: git add .

* আবার যদি আমর সেই প্রজেক্টকে  Staging Area থেকে Local Repository তে তুলতে চাই তাহলে আমাদের একটি কমান্ড লিখতে হয় তা হলো: git commit -m "message"

** কিন্তু আমরা এখানে এই কমান্ড গুলোর বাহিরে আরো কিছু কমান্ড শিখতেছি কারণ ফিউচারে যদি প্রয়োজন পড়ে তাহলে ব্যবহার করতে পারবো।

//
// ==============---- Working Dir to Staging & UnStaging ----===============
// Chack 1.png
// 
// এখন আমরা দেখব আমাদের প্রজেক্টকে কিভাবে Working Dir থেকে Staging Area তে উঠাতে পারি। আবার Staging Area থেকে ব্যাক করে  ওয়ার্কিং ডিরেক্টরিতে ফিরে আসতে পারি। এই ফিরে আসা কে বলা হচ্ছে UnStaging Area.......  এটা করার জন্য আমাদের কিছু কমান্ড নিয়ে কাজ করতে হবে। সেই কমান্ডগুলোর লিস্ট বিস্তারিতভাবে নিচে দেওয়া হলো :-

1. যদি আমরা ওয়ার্কিং ডিরেক্টরি থেকে নির্দিষ্ট একটা ফাইলকে স্টেজে উঠাতে চাই তাহলে git add filename এই কমান্ড লিখতে হবে।...For Ex: git add index.html 

2. ধরুন আপনার ওয়ার্কিং ডিরেক্টরির ভিতরে একের অধিক ফাইল আছে। আপনি চাচ্ছেন সবগুলো ফাইল কে স্টেজে উঠাতে তাহলে git add. এই কমান্ড লিখতে হবে। তাহলে Working Dir এর ভিতর যতগুলো ফাইল থাকবে সবগুলোই স্টেজে উঠে যাবে।

3. git diff এই কমান্ডের কাজ হচ্ছে, ধরুন আপনি কোন একটা ফাইলে ভিতর কোন কিছু চেঞ্জ করছেন বা নতুন কিছু এড করেছেন। এখন আপনি দেখতে চাচ্ছেন আপনি কি চেঞ্জ করছেন বা কি এড করছেন এগুলো দেখার জন্য git diff এই কমান্ড ব্যবহার করতে হবে।

4. ধরুন আপনি একটা ফাইলে নতুন কিছু এড করেছেন এখন আপনি চাচ্ছেন আগের অবস্থায় ফিরে যেতে বা যেগুলো এড করা হয়েছে সেগুলো রিমুভ করে দিতে তাহলে git restore filename এই কমান্ড লিখতে হবে। এখানে অবশ্যই আপনাকে ফাইল নেমটি বলে দিতে হবে। যে ফাইলে আপনি এড করেছেন।....... আবার চাইলে, এই কাজটি করার জন্য আমরা আরেকটি কমান্ড ব্যবহার করতে পারি। সেটা হচ্ছে git checkout filename আমরা সাধারণত এটাই ব্যবহার করব।

5. ধরুন আপনার প্রজেক্ট কে আপনি ওয়ার্কিং ডিরেক্টরি থেকে স্টেজে উঠিয়েছেন। এখন আপনি কোন কারণে চাচ্ছেন যে, প্রজেক্টকে স্টেস এরিয়া থেকে ওয়ার্কিং ডিরেক্টরিতে ব্যাক করতে তাহলে git rm --cached এই কমান্ড ব্যবহার করতে হবে। আর এই প্রসেস কে বলা হচ্ছে, UnStaging 


//
//       ।
//
// ------------------ git status কমান্ড এর ব্যবহার -------------
//
// এখন আমি দেখতে চাচ্ছি যে, আমার এই ওয়ার্কিং ডিরেক্টরি প্রজেক্টটি কোন স্টেজে আছে।....এটা কি Truck অবস্থায় আছে না Untruck অবস্থায় আছে। না আবার Local repository তে আছে। তো এগুলো দেখার জন্য আমাদের git status এই কমান্ড লিখতে হবে। তাহলে আমরা দেখতে পাব আমাদের প্রজেক্টটি কোন স্তরে আছে।

//
//       ।
//       
//
// ==============---- Staging Area to Local Repository ----===============
// Chack 2.png
// 

// এর আগে আমরা আমাদের প্রজেক্টকে ওয়ার্কিং ডিরেক্টরি থেকে স্টেজে এরিয়াতে নিয়ে এসেছি, এবার আমরা স্টেজ এরিয়া থেকে Local Repository তে নিয়ে যাব।.. তার জন্য আমাদের একটি কমান্ড লিখতে হবে।.... git commit -m "message" মনে রাখতে হবে যখন আমরা কমিট করবো তখন অবশ্যই যেন মেসেজ মিনিং ফুল হয় যাতে বুঝা যায় যে কি উদ্দেশ্যে কমিট হচ্ছে।

1. git log এই কমান্ডের কাজ হচ্ছে, আমরা কখন কমিট করছি বা কোন সময় করছি এটার একটা history দেখাবে।

2. git add. && git commit -m "message" এই কমান্ডের কাজ হচ্ছে, যদি আমরা প্রজেক্টকে সরাসরি Working Dir থেকে Local Repository তে আনতে চাই তাহলে এই কমান্ডটি ব্যবহার করতে হবে।

------------------------- 

* যদি আমরা কোন প্রজেক্টকে Local Repository থেকে ব্যাক করে স্টেট এরিয়াতে আনতে চাই তাহলে আমরা git reset --soft HEAD^ এই কমান্ডটি লিখবো।

* আবার যদি আমরা কোন প্রজেক্টকে Local Repository থেকে ব্যাক করে সরাসরি ওয়ার্কিং ডিরেক্টরিতে আনতে চাই তাহলে আমরা git reset --HEAD^ এই কমান্ডটি লিখবো।

//
//       ।
//       
//
// ==============---- How to connect Local Repository to Remote Repository ----===============

// Chack 3.png
// 
// আমাদের প্রজেক্টকে যদি আমরা Local Repository থেকে Remote or Github আপলোড করতে চাই। তাহলে আমাদের একটি কানেকশন তৈরি করতে হবে। সেটি করার জন্য আমাদের একটি কমান্ড লিখতে হবে। তা হলো: git remote add origin "Remote_URL"

For Ex: git remote add origin https//github.com/sakib-al-hasan74/first-repo.git

# এখন আমরা যে কানেকশন তৈরি করছি এটা আমরা কিভাবে বুঝব যে এটা কানেক্ট হয়েছে কি হয়নি ? এটা দেখার জন্য আমাদের দুইটা কমান্ড আছে। 

1. git remote
2. git remote -v

## git branch -M main
## git push -u origin main   এই দুইটা এখনো বাকি আছে 

//
// ========================------- git clone "Remote_URL" ---------============
//
** ধরুন আপনার একটি প্রজেক্ট রিমোট রিপোজিটরি তে আছে। এখন আপনি চাচ্ছেন সেই প্রজেক্টকে রিমোট রিপোজিটরি থেকে কপি করে বা কোলন করে আপনার লোকাল মেশিনে আনতে বা Local Repository তে আনতে। সেটি করার জন্য আমাদের একটি কমান্ড লিখতে হবে। তা হলো: git clone "Remote_URL"

For Ex: git clone https//github.com/sakib-al-hasan74/first-repo.git